/**
 * Generated by orval v7.1.1 🍺
 * Do not edit manually.
 * badgehub-api
 * Node project for the BadgeHub API
 * OpenAPI spec version: 3
 */
import type {
  DbInsertAppMetadataJSONPartial,
  ProjectProps,
  ProjectPropsPartial,
  ProjectSlug,
  Uint8Array,
  UserProps,
  Version,
  WriteFileBody
} from '../../models'

/**
 * Create a new app
 */
export type createAppResponse = {
  data: void;
  status: number;
}

export const getCreateAppUrl = (slug: ProjectSlug,) => {


  return `http://localhost:8081/api/v3/apps/${slug}`
}

export const createApp = async (slug: ProjectSlug,
    projectProps: ProjectProps, options?: RequestInit): Promise<createAppResponse> => {
  
  const res = await fetch(getCreateAppUrl(slug),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      projectProps,)
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}


/**
 * Create a new app
 */
export type deleteAppResponse = {
  data: void;
  status: number;
}

export const getDeleteAppUrl = (slug: ProjectSlug,) => {


  return `http://localhost:8081/api/v3/apps/${slug}`
}

export const deleteApp = async (slug: ProjectSlug, options?: RequestInit): Promise<deleteAppResponse> => {
  
  const res = await fetch(getDeleteAppUrl(slug),
  {      
    ...options,
    method: 'DELETE'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}


/**
 * Create a new app
 */
export type updateAppResponse = {
  data: void;
  status: number;
}

export const getUpdateAppUrl = (slug: ProjectSlug,) => {


  return `http://localhost:8081/api/v3/apps/${slug}`
}

export const updateApp = async (slug: ProjectSlug,
    projectPropsPartial: ProjectPropsPartial, options?: RequestInit): Promise<updateAppResponse> => {
  
  const res = await fetch(getUpdateAppUrl(slug),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      projectPropsPartial,)
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}


/**
 * get the latest draft version of the app in zip format
 */
export type getLatestPublishedZipResponse = {
  data: Uint8Array;
  status: number;
}

export const getGetLatestPublishedZipUrl = (slug: string,) => {


  return `http://localhost:8081/api/v3/apps/${slug}/zip/draft`
}

export const getLatestPublishedZip = async (slug: string, options?: RequestInit): Promise<getLatestPublishedZipResponse> => {
  
  const res = await fetch(getGetLatestPublishedZipUrl(slug),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}


/**
 * Create a new user
 */
export type insertUserResponse = {
  data: void;
  status: number;
}

export const getInsertUserUrl = (userId: string,) => {


  return `http://localhost:8081/api/v3/users/${userId}`
}

export const insertUser = async (userId: string,
    userProps: UserProps, options?: RequestInit): Promise<insertUserResponse> => {
  
  const res = await fetch(getInsertUserUrl(userId),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      userProps,)
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}


/**
 * Upload a file to the latest draft version of the project.
 */
export type writeFileResponse = {
  data: void;
  status: number;
}

export const getWriteFileUrl = (slug: string,
    filePath: string,) => {


  return `http://localhost:8081/api/v3/apps/${slug}/files/draft/${filePath}`
}

export const writeFile = async (slug: string,
    filePath: string,
    writeFileBody: WriteFileBody, options?: RequestInit): Promise<writeFileResponse> => {
  
  const res = await fetch(getWriteFileUrl(slug,filePath),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      writeFileBody,)
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}


/**
 * get the latest draft version of the project.
 */
export type getDraftFileResponse = {
  data: Uint8Array;
  status: number;
}

export const getGetDraftFileUrl = (slug: string,
    filePath: string,) => {


  return `http://localhost:8081/api/v3/apps/${slug}/files/draft/${filePath}`
}

export const getDraftFile = async (slug: string,
    filePath: string, options?: RequestInit): Promise<getDraftFileResponse> => {
  
  const res = await fetch(getGetDraftFileUrl(slug,filePath),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}


/**
 * Change the metadata of the latest draft version of the project.
 */
export type changeAppMetadataResponse = {
  data: void;
  status: number;
}

export const getChangeAppMetadataUrl = (slug: string,) => {


  return `http://localhost:8081/api/v3/apps/${slug}/metadata/draft`
}

export const changeAppMetadata = async (slug: string,
    dbInsertAppMetadataJSONPartial: DbInsertAppMetadataJSONPartial, options?: RequestInit): Promise<changeAppMetadataResponse> => {
  
  const res = await fetch(getChangeAppMetadataUrl(slug),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      dbInsertAppMetadataJSONPartial,)
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}


/**
 * Upload a file to the latest draft version of the project.
 */
export type writeZipResponse = {
  data: Version;
  status: number;
}

export const getWriteZipUrl = (slug: string,) => {


  return `http://localhost:8081/api/v3/apps/${slug}/zip/draft`
}

export const writeZip = async (slug: string,
    uint8Array: Uint8Array, options?: RequestInit): Promise<writeZipResponse> => {
  
  const res = await fetch(getWriteZipUrl(slug),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      uint8Array,)
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}


/**
 * Publish the latest draft version
 */
export type publishVersionResponse = {
  data: void;
  status: number;
}

export const getPublishVersionUrl = (slug: string,) => {


  return `http://localhost:8081/api/v3/apps/${slug}/publish`
}

export const publishVersion = async (slug: string, options?: RequestInit): Promise<publishVersionResponse> => {
  
  const res = await fetch(getPublishVersionUrl(slug),
  {      
    ...options,
    method: 'PATCH'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}


