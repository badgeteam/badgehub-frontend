/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * badgehub-api
 * Node project for the BadgeHub API
 * OpenAPI spec version: 3
 */
import type {
  DbInsertAppMetadataJSONPartial,
  GetDraftApp404,
  GetDraftFile404,
  PickCreateProjectPropsExcludeKeyofCreateProjectPropsSlug,
  Project,
  ProjectPropsPartial,
  ProjectSlug,
  Uint8Array,
  UserProps,
  WriteDraftFileBody
} from '../../models';

import { fetchWithBaseUrl } from '../../../../fetch-from-api';

/**
 * Create a new project
 */
export type createAppResponse204 = {
  data: void
  status: 204
}
    
export type createAppResponseComposite = createAppResponse204;
    
export type createAppResponse = createAppResponseComposite & {
  headers: Headers;
}

export const getCreateAppUrl = (slug: ProjectSlug,) => {


  

  return `/api/v3/projects/${slug}`
}

export const createApp = async (slug: ProjectSlug,
    pickCreateProjectPropsExcludeKeyofCreateProjectPropsSlug: PickCreateProjectPropsExcludeKeyofCreateProjectPropsSlug, options?: RequestInit): Promise<createAppResponse> => {
  
  return fetchWithBaseUrl<createAppResponse>(getCreateAppUrl(slug),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      pickCreateProjectPropsExcludeKeyofCreateProjectPropsSlug,)
  }
);}


/**
 * Create a new project
 */
export type deleteAppResponse204 = {
  data: void
  status: 204
}
    
export type deleteAppResponseComposite = deleteAppResponse204;
    
export type deleteAppResponse = deleteAppResponseComposite & {
  headers: Headers;
}

export const getDeleteAppUrl = (slug: ProjectSlug,) => {


  

  return `/api/v3/projects/${slug}`
}

export const deleteApp = async (slug: ProjectSlug, options?: RequestInit): Promise<deleteAppResponse> => {
  
  return fetchWithBaseUrl<deleteAppResponse>(getDeleteAppUrl(slug),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}


/**
 * Create a new project
 */
export type updateAppResponse204 = {
  data: void
  status: 204
}
    
export type updateAppResponseComposite = updateAppResponse204;
    
export type updateAppResponse = updateAppResponseComposite & {
  headers: Headers;
}

export const getUpdateAppUrl = (slug: ProjectSlug,) => {


  

  return `/api/v3/projects/${slug}`
}

export const updateApp = async (slug: ProjectSlug,
    projectPropsPartial: ProjectPropsPartial, options?: RequestInit): Promise<updateAppResponse> => {
  
  return fetchWithBaseUrl<updateAppResponse>(getUpdateAppUrl(slug),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      projectPropsPartial,)
  }
);}


/**
 * get the latest draft version of the project in zip format
 */
export type getLatestPublishedZipResponse200 = {
  data: Uint8Array
  status: 200
}
    
export type getLatestPublishedZipResponseComposite = getLatestPublishedZipResponse200;
    
export type getLatestPublishedZipResponse = getLatestPublishedZipResponseComposite & {
  headers: Headers;
}

export const getGetLatestPublishedZipUrl = (slug: string,) => {


  

  return `/api/v3/projects/${slug}/draft/zip`
}

export const getLatestPublishedZip = async (slug: string, options?: RequestInit): Promise<getLatestPublishedZipResponse> => {
  
  return fetchWithBaseUrl<getLatestPublishedZipResponse>(getGetLatestPublishedZipUrl(slug),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * Create a new user
 */
export type insertUserResponse204 = {
  data: void
  status: 204
}
    
export type insertUserResponseComposite = insertUserResponse204;
    
export type insertUserResponse = insertUserResponseComposite & {
  headers: Headers;
}

export const getInsertUserUrl = (userId: number,) => {


  

  return `/api/v3/users/${userId}`
}

export const insertUser = async (userId: number,
    userProps: UserProps, options?: RequestInit): Promise<insertUserResponse> => {
  
  return fetchWithBaseUrl<insertUserResponse>(getInsertUserUrl(userId),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      userProps,)
  }
);}


/**
 * Upload a file to the latest draft version of the project.
 */
export type writeDraftFileResponse204 = {
  data: void
  status: 204
}
    
export type writeDraftFileResponseComposite = writeDraftFileResponse204;
    
export type writeDraftFileResponse = writeDraftFileResponseComposite & {
  headers: Headers;
}

export const getWriteDraftFileUrl = (slug: string,
    filePath: string,) => {


  

  return `/api/v3/projects/${slug}/draft/files/${filePath}`
}

export const writeDraftFile = async (slug: string,
    filePath: string,
    writeDraftFileBody: WriteDraftFileBody, options?: RequestInit): Promise<writeDraftFileResponse> => {
    const formData = new FormData();
formData.append('file', writeDraftFileBody.file)

  return fetchWithBaseUrl<writeDraftFileResponse>(getWriteDraftFileUrl(slug,filePath),
  {      
    ...options,
    method: 'POST'
    ,
    body: 
      formData,
  }
);}


/**
 * Upload a file to the latest draft version of the project.
 */
export type deleteDraftFileResponse204 = {
  data: void
  status: 204
}
    
export type deleteDraftFileResponseComposite = deleteDraftFileResponse204;
    
export type deleteDraftFileResponse = deleteDraftFileResponseComposite & {
  headers: Headers;
}

export const getDeleteDraftFileUrl = (slug: string,
    filePath: string,) => {


  

  return `/api/v3/projects/${slug}/draft/files/${filePath}`
}

export const deleteDraftFile = async (slug: string,
    filePath: string, options?: RequestInit): Promise<deleteDraftFileResponse> => {
  
  return fetchWithBaseUrl<deleteDraftFileResponse>(getDeleteDraftFileUrl(slug,filePath),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}


/**
 * get the latest draft version of the project.
 */
export type getDraftFileResponse200 = {
  data: string
  status: 200
}

export type getDraftFileResponse404 = {
  data: GetDraftFile404
  status: 404
}
    
export type getDraftFileResponseComposite = getDraftFileResponse200 | getDraftFileResponse404;
    
export type getDraftFileResponse = getDraftFileResponseComposite & {
  headers: Headers;
}

export const getGetDraftFileUrl = (slug: string,
    filePath: string,) => {


  

  return `/api/v3/projects/${slug}/draft/files/${filePath}`
}

export const getDraftFile = async (slug: string,
    filePath: string, options?: RequestInit): Promise<getDraftFileResponse> => {
  
  return fetchWithBaseUrl<getDraftFileResponse>(getGetDraftFileUrl(slug,filePath),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * Change the metadata of the latest draft version of the project.
 */
export type changeDraftAppMetadataResponse204 = {
  data: void
  status: 204
}
    
export type changeDraftAppMetadataResponseComposite = changeDraftAppMetadataResponse204;
    
export type changeDraftAppMetadataResponse = changeDraftAppMetadataResponseComposite & {
  headers: Headers;
}

export const getChangeDraftAppMetadataUrl = (slug: string,) => {


  

  return `/api/v3/projects/${slug}/draft/metadata`
}

export const changeDraftAppMetadata = async (slug: string,
    dbInsertAppMetadataJSONPartial: DbInsertAppMetadataJSONPartial, options?: RequestInit): Promise<changeDraftAppMetadataResponse> => {
  
  return fetchWithBaseUrl<changeDraftAppMetadataResponse>(getChangeDraftAppMetadataUrl(slug),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      dbInsertAppMetadataJSONPartial,)
  }
);}


/**
 * Get App details of the draft version of the project
 */
export type getDraftAppResponse200 = {
  data: Project
  status: 200
}

export type getDraftAppResponse404 = {
  data: GetDraftApp404
  status: 404
}
    
export type getDraftAppResponseComposite = getDraftAppResponse200 | getDraftAppResponse404;
    
export type getDraftAppResponse = getDraftAppResponseComposite & {
  headers: Headers;
}

export const getGetDraftAppUrl = (slug: string,) => {


  

  return `/api/v3/projects/${slug}/draft`
}

export const getDraftApp = async (slug: string, options?: RequestInit): Promise<getDraftAppResponse> => {
  
  return fetchWithBaseUrl<getDraftAppResponse>(getGetDraftAppUrl(slug),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * Upload a file to the latest draft version of the project.
 */
export type writeZipResponse204 = {
  data: void
  status: 204
}
    
export type writeZipResponseComposite = writeZipResponse204;
    
export type writeZipResponse = writeZipResponseComposite & {
  headers: Headers;
}

export const getWriteZipUrl = (slug: string,) => {


  

  return `/api/v3/projects/${slug}/draft/zip`
}

export const writeZip = async (slug: string,
    uint8Array: Uint8Array, options?: RequestInit): Promise<writeZipResponse> => {
  
  return fetchWithBaseUrl<writeZipResponse>(getWriteZipUrl(slug),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      uint8Array,)
  }
);}


/**
 * Publish the current draft as a new version
 */
export type publishVersionResponse204 = {
  data: void
  status: 204
}
    
export type publishVersionResponseComposite = publishVersionResponse204;
    
export type publishVersionResponse = publishVersionResponseComposite & {
  headers: Headers;
}

export const getPublishVersionUrl = (slug: string,) => {


  

  return `/api/v3/projects/${slug}/publish`
}

export const publishVersion = async (slug: string, options?: RequestInit): Promise<publishVersionResponse> => {
  
  return fetchWithBaseUrl<publishVersionResponse>(getPublishVersionUrl(slug),
  {      
    ...options,
    method: 'PATCH'
    
    
  }
);}


