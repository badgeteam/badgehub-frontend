/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * badgehub-api
 * Node project for the BadgeHub API
 * OpenAPI spec version: 3
 */
import type {
  DbInsertAppMetadataJSONPartial,
  GetDraftFile404,
  GetDraftProject404,
  PickCreateProjectPropsExcludeKeyofCreateProjectPropsSlug,
  Project,
  ProjectPropsPartial,
  ProjectSlug,
  WriteDraftFileBody
} from '../../models';

import { fetchWithBaseUrl } from '../../../../fetch-from-api';

/**
 * Create a new project
 */
export type createProjectResponse204 = {
  data: void
  status: 204
}
    
export type createProjectResponseComposite = createProjectResponse204;
    
export type createProjectResponse = createProjectResponseComposite & {
  headers: Headers;
}

export const getCreateProjectUrl = (slug: ProjectSlug,) => {


  

  return `/api/v3/projects/${slug}`
}

export const createProject = async (slug: ProjectSlug,
    pickCreateProjectPropsExcludeKeyofCreateProjectPropsSlug: PickCreateProjectPropsExcludeKeyofCreateProjectPropsSlug, options?: RequestInit): Promise<createProjectResponse> => {
  
  return fetchWithBaseUrl<createProjectResponse>(getCreateProjectUrl(slug),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      pickCreateProjectPropsExcludeKeyofCreateProjectPropsSlug,)
  }
);}


/**
 * Create a new project
 */
export type deleteProjectResponse204 = {
  data: void
  status: 204
}
    
export type deleteProjectResponseComposite = deleteProjectResponse204;
    
export type deleteProjectResponse = deleteProjectResponseComposite & {
  headers: Headers;
}

export const getDeleteProjectUrl = (slug: ProjectSlug,) => {


  

  return `/api/v3/projects/${slug}`
}

export const deleteProject = async (slug: ProjectSlug, options?: RequestInit): Promise<deleteProjectResponse> => {
  
  return fetchWithBaseUrl<deleteProjectResponse>(getDeleteProjectUrl(slug),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}


/**
 * Create a new project
 */
export type updateProjectResponse204 = {
  data: void
  status: 204
}
    
export type updateProjectResponseComposite = updateProjectResponse204;
    
export type updateProjectResponse = updateProjectResponseComposite & {
  headers: Headers;
}

export const getUpdateProjectUrl = (slug: ProjectSlug,) => {


  

  return `/api/v3/projects/${slug}`
}

export const updateProject = async (slug: ProjectSlug,
    projectPropsPartial: ProjectPropsPartial, options?: RequestInit): Promise<updateProjectResponse> => {
  
  return fetchWithBaseUrl<updateProjectResponse>(getUpdateProjectUrl(slug),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      projectPropsPartial,)
  }
);}


/**
 * Upload a file to the latest draft version of the project.
 */
export type writeDraftFileResponse204 = {
  data: void
  status: 204
}
    
export type writeDraftFileResponseComposite = writeDraftFileResponse204;
    
export type writeDraftFileResponse = writeDraftFileResponseComposite & {
  headers: Headers;
}

export const getWriteDraftFileUrl = (slug: string,
    filePath: string,) => {


  

  return `/api/v3/projects/${slug}/draft/files/${filePath}`
}

export const writeDraftFile = async (slug: string,
    filePath: string,
    writeDraftFileBody: WriteDraftFileBody, options?: RequestInit): Promise<writeDraftFileResponse> => {
    const formData = new FormData();
formData.append('file', writeDraftFileBody.file)

  return fetchWithBaseUrl<writeDraftFileResponse>(getWriteDraftFileUrl(slug,filePath),
  {      
    ...options,
    method: 'POST'
    ,
    body: 
      formData,
  }
);}


/**
 * Upload a file to the latest draft version of the project.
 */
export type deleteDraftFileResponse204 = {
  data: void
  status: 204
}
    
export type deleteDraftFileResponseComposite = deleteDraftFileResponse204;
    
export type deleteDraftFileResponse = deleteDraftFileResponseComposite & {
  headers: Headers;
}

export const getDeleteDraftFileUrl = (slug: string,
    filePath: string,) => {


  

  return `/api/v3/projects/${slug}/draft/files/${filePath}`
}

export const deleteDraftFile = async (slug: string,
    filePath: string, options?: RequestInit): Promise<deleteDraftFileResponse> => {
  
  return fetchWithBaseUrl<deleteDraftFileResponse>(getDeleteDraftFileUrl(slug,filePath),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}


/**
 * get the latest draft version of the project.
 */
export type getDraftFileResponse200 = {
  data: string
  status: 200
}

export type getDraftFileResponse404 = {
  data: GetDraftFile404
  status: 404
}
    
export type getDraftFileResponseComposite = getDraftFileResponse200 | getDraftFileResponse404;
    
export type getDraftFileResponse = getDraftFileResponseComposite & {
  headers: Headers;
}

export const getGetDraftFileUrl = (slug: string,
    filePath: string,) => {


  

  return `/api/v3/projects/${slug}/draft/files/${filePath}`
}

export const getDraftFile = async (slug: string,
    filePath: string, options?: RequestInit): Promise<getDraftFileResponse> => {
  
  return fetchWithBaseUrl<getDraftFileResponse>(getGetDraftFileUrl(slug,filePath),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * Change the metadata of the latest draft version of the project.
 */
export type changeDraftAppMetadataResponse204 = {
  data: void
  status: 204
}
    
export type changeDraftAppMetadataResponseComposite = changeDraftAppMetadataResponse204;
    
export type changeDraftAppMetadataResponse = changeDraftAppMetadataResponseComposite & {
  headers: Headers;
}

export const getChangeDraftAppMetadataUrl = (slug: string,) => {


  

  return `/api/v3/projects/${slug}/draft/metadata`
}

export const changeDraftAppMetadata = async (slug: string,
    dbInsertAppMetadataJSONPartial: DbInsertAppMetadataJSONPartial, options?: RequestInit): Promise<changeDraftAppMetadataResponse> => {
  
  return fetchWithBaseUrl<changeDraftAppMetadataResponse>(getChangeDraftAppMetadataUrl(slug),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      dbInsertAppMetadataJSONPartial,)
  }
);}


/**
 * Get Project details of the draft version of the project
 */
export type getDraftProjectResponse200 = {
  data: Project
  status: 200
}

export type getDraftProjectResponse404 = {
  data: GetDraftProject404
  status: 404
}
    
export type getDraftProjectResponseComposite = getDraftProjectResponse200 | getDraftProjectResponse404;
    
export type getDraftProjectResponse = getDraftProjectResponseComposite & {
  headers: Headers;
}

export const getGetDraftProjectUrl = (slug: string,) => {


  

  return `/api/v3/projects/${slug}/draft`
}

export const getDraftProject = async (slug: string, options?: RequestInit): Promise<getDraftProjectResponse> => {
  
  return fetchWithBaseUrl<getDraftProjectResponse>(getGetDraftProjectUrl(slug),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * Publish the current draft as a new version
 */
export type publishVersionResponse204 = {
  data: void
  status: 204
}
    
export type publishVersionResponseComposite = publishVersionResponse204;
    
export type publishVersionResponse = publishVersionResponseComposite & {
  headers: Headers;
}

export const getPublishVersionUrl = (slug: string,) => {


  

  return `/api/v3/projects/${slug}/publish`
}

export const publishVersion = async (slug: string, options?: RequestInit): Promise<publishVersionResponse> => {
  
  return fetchWithBaseUrl<publishVersionResponse>(getPublishVersionUrl(slug),
  {      
    ...options,
    method: 'PATCH'
    
    
  }
);}


