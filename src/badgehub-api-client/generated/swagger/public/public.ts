/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * badgehub-api
 * Node project for the BadgeHub API
 * OpenAPI spec version: 3
 */
import type {
  Badge,
  Category,
  GetFileForVersion404,
  GetLatestPublishedFile404,
  GetProject404,
  GetProjectVersion404,
  GetProjectsParams,
  PickProjectExcludeKeyofProjectVersion,
  Project,
  RevisionNumber
} from '../../models';

import { fetchWithBaseUrl } from '../../../../fetch-from-api';

/**
 * Get list of devices (badges)
 */
export type getDevicesResponse200 = {
  data: Badge[]
  status: 200
}
    
export type getDevicesResponseComposite = getDevicesResponse200;
    
export type getDevicesResponse = getDevicesResponseComposite & {
  headers: Headers;
}

export const getGetDevicesUrl = () => {


  

  return `/api/v3/devices`
}

export const getDevices = async ( options?: RequestInit): Promise<getDevicesResponse> => {
  
  return fetchWithBaseUrl<getDevicesResponse>(getGetDevicesUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * Get list of categories
 */
export type getCategoriesResponse200 = {
  data: Category[]
  status: 200
}
    
export type getCategoriesResponseComposite = getCategoriesResponse200;
    
export type getCategoriesResponse = getCategoriesResponseComposite & {
  headers: Headers;
}

export const getGetCategoriesUrl = () => {


  

  return `/api/v3/categories`
}

export const getCategories = async ( options?: RequestInit): Promise<getCategoriesResponse> => {
  
  return fetchWithBaseUrl<getCategoriesResponse>(getGetCategoriesUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * Get list of projects, optionally limited by page start/length and/or filtered by categorySlug
 */
export type getProjectsResponse200 = {
  data: PickProjectExcludeKeyofProjectVersion[]
  status: 200
}
    
export type getProjectsResponseComposite = getProjectsResponse200;
    
export type getProjectsResponse = getProjectsResponseComposite & {
  headers: Headers;
}

export const getGetProjectsUrl = (params?: GetProjectsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/api/v3/projects?${stringifiedParams}` : `/api/v3/projects`
}

export const getProjects = async (params?: GetProjectsParams, options?: RequestInit): Promise<getProjectsResponse> => {
  
  return fetchWithBaseUrl<getProjectsResponse>(getGetProjectsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * Get project details for a specific published revision of the project
 */
export type getProjectVersionResponse200 = {
  data: Project
  status: 200
}

export type getProjectVersionResponse404 = {
  data: GetProjectVersion404
  status: 404
}
    
export type getProjectVersionResponseComposite = getProjectVersionResponse200 | getProjectVersionResponse404;
    
export type getProjectVersionResponse = getProjectVersionResponseComposite & {
  headers: Headers;
}

export const getGetProjectVersionUrl = (slug: string,
    revision: RevisionNumber,) => {


  

  return `/api/v3/projects/${slug}/rev${revision}`
}

export const getProjectVersion = async (slug: string,
    revision: RevisionNumber, options?: RequestInit): Promise<getProjectVersionResponse> => {
  
  return fetchWithBaseUrl<getProjectVersionResponse>(getGetProjectVersionUrl(slug,revision),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * Get project details of the latest published version
 */
export type getProjectResponse200 = {
  data: Project
  status: 200
}

export type getProjectResponse404 = {
  data: GetProject404
  status: 404
}
    
export type getProjectResponseComposite = getProjectResponse200 | getProjectResponse404;
    
export type getProjectResponse = getProjectResponseComposite & {
  headers: Headers;
}

export const getGetProjectUrl = (slug: string,) => {


  

  return `/api/v3/projects/${slug}`
}

export const getProject = async (slug: string, options?: RequestInit): Promise<getProjectResponse> => {
  
  return fetchWithBaseUrl<getProjectResponse>(getGetProjectUrl(slug),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * get the latest published version of a file in the project
 */
export type getLatestPublishedFileResponse200 = {
  data: string
  status: 200
}

export type getLatestPublishedFileResponse404 = {
  data: GetLatestPublishedFile404
  status: 404
}
    
export type getLatestPublishedFileResponseComposite = getLatestPublishedFileResponse200 | getLatestPublishedFileResponse404;
    
export type getLatestPublishedFileResponse = getLatestPublishedFileResponseComposite & {
  headers: Headers;
}

export const getGetLatestPublishedFileUrl = (slug: string,
    filePath: string,) => {


  

  return `/api/v3/projects/${slug}/latest/files/${filePath}`
}

export const getLatestPublishedFile = async (slug: string,
    filePath: string, options?: RequestInit): Promise<getLatestPublishedFileResponse> => {
  
  return fetchWithBaseUrl<getLatestPublishedFileResponse>(getGetLatestPublishedFileUrl(slug,filePath),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * get a file for a specific version of the project
 */
export type getFileForVersionResponse200 = {
  data: string
  status: 200
}

export type getFileForVersionResponse404 = {
  data: GetFileForVersion404
  status: 404
}
    
export type getFileForVersionResponseComposite = getFileForVersionResponse200 | getFileForVersionResponse404;
    
export type getFileForVersionResponse = getFileForVersionResponseComposite & {
  headers: Headers;
}

export const getGetFileForVersionUrl = (slug: string,
    revision: RevisionNumber,
    filePath: string,) => {


  

  return `/api/v3/projects/${slug}/rev${revision}/files/${filePath}`
}

export const getFileForVersion = async (slug: string,
    revision: RevisionNumber,
    filePath: string, options?: RequestInit): Promise<getFileForVersionResponse> => {
  
  return fetchWithBaseUrl<getFileForVersionResponse>(getGetFileForVersionUrl(slug,revision,filePath),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * get the project zip for a specific version of the project
 */
export type getZipForVersionResponse200 = {
  data: string
  status: 200
}
    
export type getZipForVersionResponseComposite = getZipForVersionResponse200;
    
export type getZipForVersionResponse = getZipForVersionResponseComposite & {
  headers: Headers;
}

export const getGetZipForVersionUrl = (slug: string,
    revision: number,) => {


  

  return `/api/v3/projects/${slug}/zip/rev${revision}`
}

export const getZipForVersion = async (slug: string,
    revision: number, options?: RequestInit): Promise<getZipForVersionResponse> => {
  
  return fetchWithBaseUrl<getZipForVersionResponse>(getGetZipForVersionUrl(slug,revision),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


